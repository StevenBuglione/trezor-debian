# ==== Base: minimal live (no browsers) ====
%include __KSDIR__/fedora-live-minimization.ks

# ==== Users / auth / services ====
rootpw --lock
user --name=trezor --groups=wheel --homedir=/home/trezor --shell=/bin/bash --lock

selinux --enforcing
firewall --disabled
firstboot --disable

# Display manager & graphical login
services --enabled="sddm" --disabled="sshd,NetworkManager-wait-online,avahi-daemon,cups,ModemManager"
xconfig --startxonboot   # (valid kickstart directive; don't try defaultdesktop=lxqt)

# ==== Packages: minimal LXQt Wayland + Trezor ====
%packages
# LXQt (Wayland-first) + basics
lxqt-session
lxqt-panel
lxqt-policykit
lxqt-themes
lxqt-wayland-session
lxqt-wayland-session-default-compositor-miriway
xorg-x11-server-Xwayland
sddm
xterm
dejavu-sans-fonts
dejavu-serif-fonts

# Trezor + helpers
trezor-common
fuse-libs
curl
jq
sudo
ca-certificates
rsync

# REQUIRED for live ISO creation
dracut-config-generic
dracut-live
-dracut-config-rescue
grub2-efi-x64
syslinux
%end

# ==== Post (host) — bundle AppImage if prefetched, and bundle repo scripts ====
%post --nochroot --log=/root/trezor-post.log
set -euo pipefail

LIVE_ROOT="/mnt/sysimage"
SRC_VENDOR="/workspace/scripts/fedora-live/vendor"
SRC_SCRIPTS="/workspace/trezor-scripts"

# 1) SDDM autologin into LXQt Wayland
install -d -m0755 "${LIVE_ROOT}/etc/sddm.conf.d"
cat > "${LIVE_ROOT}/etc/sddm.conf.d/10-autologin.conf" <<'EOF'
[Autologin]
User=trezor
Session=lxqt-wayland.desktop
EOF

# 2) Ensure dirs
install -d -m0755 "${LIVE_ROOT}/opt/trezor"
install -d -m0755 "${LIVE_ROOT}/opt/trezor-scripts"
install -d -m0755 "${LIVE_ROOT}/usr/share/applications"
install -d -m0755 "${LIVE_ROOT}/usr/local/bin"
install -d -m0755 "${LIVE_ROOT}/etc/xdg/autostart"

# 3) Vendor Trezor Suite artifacts if prefetched (optional)
[ -f "${SRC_VENDOR}/trezor-suite.AppImage" ]     && install -m0755 "${SRC_VENDOR}/trezor-suite.AppImage"     "${LIVE_ROOT}/opt/trezor/trezor-suite.AppImage"     || true
[ -f "${SRC_VENDOR}/trezor-suite.AppImage.asc" ] && install -m0644 "${SRC_VENDOR}/trezor-suite.AppImage.asc" "${LIVE_ROOT}/opt/trezor/trezor-suite.AppImage.asc" || true
[ -f "${SRC_VENDOR}/trezor.asc" ]                && install -m0644 "${SRC_VENDOR}/trezor.asc"                "${LIVE_ROOT}/opt/trezor/trezor.asc"                || true

# 4) Bundle your repo scripts (excludes VCS junk), make executable
if [ -d "${SRC_SCRIPTS}" ]; then
  rsync -a --delete \
    --exclude ".git" --exclude ".github" --exclude ".gitmodules" \
    --exclude "*.md" \
    "${SRC_SCRIPTS}/" "${LIVE_ROOT}/opt/trezor-scripts/"
  find "${LIVE_ROOT}/opt/trezor-scripts" -type f -name "*.sh" -exec chmod 0755 {} \;
  find "${LIVE_ROOT}/opt/trezor-scripts" -type f -maxdepth 1 -exec chmod 0755 {} \; || true
fi

# 5) First-run wrapper: fetch correct-arch AppImage if missing, then exec it
cat > "${LIVE_ROOT}/usr/local/bin/trezor-suite" <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
APP="/opt/trezor/trezor-suite.AppImage"

if [ ! -x "$APP" ]; then
  ARCH="$(uname -m)"
  case "$ARCH" in
    x86_64|amd64) RX='linux.*(x86_64|amd64|x64).*AppImage$' ;;
    aarch64|arm64) RX='linux.*(aarch64|arm64).*AppImage$' ;;
    armv7l|armv7|armhf) RX='linux.*(armv7|armhf).*AppImage$' ;;
    *) RX='AppImage$' ;;
  esac
  echo "Trezor Suite missing. Fetching latest for $ARCH …"
  URL="$(curl -fsSL https://api.github.com/repos/trezor/trezor-suite/releases/latest \
        | jq -r --arg rx "$RX" '.assets[] | select(.name|test($rx)) | .browser_download_url' | head -n1)"
  [ -n "$URL" ] || { echo "Could not determine AppImage URL for $ARCH." >&2; exit 1; }
  TMP="$(mktemp)"
  curl -fsSL -L "$URL" -o "$TMP"
  sudo install -m0755 "$TMP" "$APP"
  rm -f "$TMP"
fi

exec "$APP" --no-sandbox "$@"
EOS
chmod +x "${LIVE_ROOT}/usr/local/bin/trezor-suite"

# 6) Desktop launcher (always present)
cat > "${LIVE_ROOT}/usr/share/applications/trezor-suite.desktop" <<'EOF'
[Desktop Entry]
Name=Trezor Suite
Comment=Manage your Trezor hardware wallet
Exec=/usr/local/bin/trezor-suite
Terminal=false
Type=Application
Categories=Finance;Utility;
EOF

# 7) Optional: auto-start Trezor after login
cat > "${LIVE_ROOT}/etc/xdg/autostart/trezor-suite.desktop" <<'EOF'
[Desktop Entry]
Name=Trezor Suite (Auto)
Exec=/usr/local/bin/trezor-suite
Type=Application
X-GNOME-Autostart-enabled=true
EOF

# 8) Shell setup: add /opt/trezor-scripts to PATH; helper alias
for HOMEBASE in "${LIVE_ROOT}/etc/skel" "${LIVE_ROOT}/home/trezor"; do
  install -d -m0755 "${HOMEBASE}"
  if ! grep -q 'if \[ -f ~/.bashrc \]' "${HOMEBASE}/.bash_profile" 2>/dev/null; then
    cat >> "${HOMEBASE}/.bash_profile" <<'RC'
if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi
RC
  fi
  cat >> "${HOMEBASE}/.bashrc" <<'RC'
export PATH="/opt/trezor-scripts:$HOME/bin:$PATH"
alias update-trezor-suite='/usr/local/bin/update-trezor-suite'
RC
done

# 9) System-wide updater (you can replace with your own script)
cat > "${LIVE_ROOT}/usr/local/bin/update-trezor-suite" <<'EOS'
#!/usr/bin/env bash
set -euo pipefail
APP="/opt/trezor/trezor-suite.AppImage"
ARCH="$(uname -m)"
case "$ARCH" in
  x86_64|amd64) RX='linux.*(x86_64|amd64|x64).*AppImage$' ;;
  aarch64|arm64) RX='linux.*(aarch64|arm64).*AppImage$' ;;
  armv7l|armv7|armhf) RX='linux.*(armv7|armhf).*AppImage$' ;;
  *) RX='AppImage$' ;;
esac
URL="$(curl -fsSL https://api.github.com/repos/trezor/trezor-suite/releases/latest \
      | jq -r --arg rx "$RX" '.assets[] | select(.name|test($rx)) | .browser_download_url' | head -n1)"
[ -n "$URL" ] || { echo "Could not determine AppImage URL for $ARCH." >&2; exit 1; }
TMP="$(mktemp)"
curl -fsSL -L "$URL" -o "$TMP"
sudo install -m0755 "$TMP" "$APP"
rm -f "$TMP"
echo "Updated Trezor Suite at $APP"
EOS
chmod +x "${LIVE_ROOT}/usr/local/bin/update-trezor-suite"

# 10) Ownership for trezor's home
chroot "${LIVE_ROOT}" /usr/sbin/usermod -d /home/trezor -s /bin/bash trezor || true
chroot "${LIVE_ROOT}" /usr/bin/chown -R trezor:trezor /home/trezor || true
%end
