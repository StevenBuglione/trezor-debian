name: Build Ubuntu Noble Live ISO with Trezor Suite

on:
  workflow_dispatch:
    inputs:
      suite_version:
        description: "Optional: pin a specific Trezor Suite tag (e.g. v25.9.3). Leave empty for 'latest'."
        required: false
        default: ""
  schedule:
    # Weekly rebuild to pull Ubuntu security updates and latest Suite
    - cron: "0 3 * * 1"

jobs:
  build:
    runs-on: ubuntu-24.04  # match target release family to avoid debootstrap script issues
    permissions:
      contents: read
      actions: read
      id-token: none

    env:
      SUITE: noble
      ARCH: amd64
      ISO_NAME: ubuntu-noble-trezor
      ISO_LABEL: UBUNTU_NOBLE_TREZOR
      TZ: UTC
      # Official SatoshiLabs 2021 key fingerprint (must match VALIDSIG)
      TREZOR_KEY_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"
      # Where to fetch the signing key (documented by multiple sources)
      TREZOR_KEY_URL: "https://trezor.io/security/satoshilabs-2021-signing-key.asc"
      # udev rules official endpoint
      TREZOR_UDEV_URL: "https://data.trezor.io/udev/51-trezor.rules"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show runner
        run: |
          uname -a
          lsb_release -a || true

      - name: Install build dependencies (live-build, debootstrap, EFI tooling)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            live-build debootstrap \
            squashfs-tools xorriso mtools dosfstools \
            grub-efi-amd64-bin grub-pc-bin \
            gdisk \
            curl ca-certificates gnupg coreutils jq \
            libfuse2 fuse3 file \
            isolinux syslinux-common # harmless even if unused; helps lb deps
          lb --version || true
          debootstrap --version || true

      - name: Prepare config tree
        shell: bash
        run: |
          set -euo pipefail
          rm -rf config logs build-cache
          mkdir -p config/includes.chroot/opt/trezor
          mkdir -p config/includes.chroot/usr/share/applications
          mkdir -p config/includes.chroot/etc/udev/rules.d
          mkdir -p config/hooks/normal
          mkdir -p config/package-lists
          mkdir -p logs build-cache

      - name: Fetch latest (or pinned) Trezor Suite AppImage + signature from GitHub Releases
        id: fetch_suite
        shell: bash
        run: |
          set -euo pipefail

          WANT="${{ github.event.inputs.suite_version }}"

          # Find asset URLs from GitHub API (latest or pinned)
          if [[ -n "${WANT}" ]]; then
            API_URL="https://api.github.com/repos/trezor/trezor-suite/releases/tags/${WANT}"
          else
            API_URL="https://api.github.com/repos/trezor/trezor-suite/releases/latest"
          fi

          echo "Querying: $API_URL"
          curl -fsSL "$API_URL" -o build-cache/release.json
          APPIMAGE_URL=$(jq -r '.assets[] | select(.name|test("AppImage$")) | .browser_download_url' build-cache/release.json | head -n1)
          SIG_URL=$(jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .browser_download_url' build-cache/release.json | head -n1)
          if [[ -z "${APPIMAGE_URL}" || -z "${SIG_URL}" ]]; then
            echo "Could not locate AppImage or its .asc signature in GitHub release JSON"
            jq '.' build-cache/release.json || true
            exit 1
          fi
          echo "AppImage: $APPIMAGE_URL"
          echo "Signature: $SIG_URL"
          curl -fsSL "${APPIMAGE_URL}" -o build-cache/trezor-suite.AppImage
          curl -fsSL "${SIG_URL}"      -o build-cache/trezor-suite.AppImage.asc
          file build-cache/trezor-suite.AppImage || true

      - name: Import SatoshiLabs 2021 signing key and hard-verify fingerprint
        shell: bash
        run: |
          set -euo pipefail
          # Fetch key from trezor.io (we still *pin* the fingerprint below)
          curl -fsSL "${TREZOR_KEY_URL}" -o build-cache/satoshilabs-2021-signing-key.asc
          gpg --batch --import build-cache/satoshilabs-2021-signing-key.asc

          # Show first fingerprint in keyring (debug)
          IMPORTED_FPR=$(gpg --with-colons --fingerprint | awk -F: '/^fpr:/{print $10; exit}')
          echo "Imported key (first fpr): $IMPORTED_FPR"

          # Verify signature and capture machine-readable status
          set +e
          gpg --status-fd=1 --batch --verify \
              build-cache/trezor-suite.AppImage.asc \
              build-cache/trezor-suite.AppImage \
              1> logs/gpg-status.log \
              2> logs/gpg-stderr.log
          rc=$?
          set -e
          cat logs/gpg-status.log

          # Basic check: at least one GOODSIG
          SIG_GOOD=$(awk 'BEGIN{c=0} /^\[GNUPG:\] GOODSIG /{c++} END{print c}' logs/gpg-status.log)
          if [[ "${SIG_GOOD}" -lt 1 ]]; then
            echo "No GOODSIG in status output"; exit 4
          fi

          # Extract VALIDSIG fingerprint (field 3)
          SIG_FPR=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' logs/gpg-status.log)
          echo "VALIDSIG: ${SIG_FPR}"
          if [[ -z "${SIG_FPR}" ]]; then
            echo "Missing VALIDSIG line"; exit 5
          fi
          if [[ "${SIG_FPR}" != "${TREZOR_KEY_FPR}" ]]; then
            echo "Fingerprint mismatch: got ${SIG_FPR}, expected ${TREZOR_KEY_FPR}"; exit 6
          fi
          echo "Signature OK and matches pinned fingerprint."

          # Stage AppImage into image
          chmod +x build-cache/trezor-suite.AppImage
          cp build-cache/trezor-suite.AppImage config/includes.chroot/opt/trezor/trezor-suite.AppImage

      - name: Install Trezor udev rules into image
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${TREZOR_UDEV_URL}" -o config/includes.chroot/etc/udev/rules.d/51-trezor.rules
          # Add desktop launcher
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Manage your Trezor hardware wallet
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF
          # Minimal runtime packages for AppImage and device access
          cat > config/package-lists/trezor.list.chroot <<'EOF'
          fuse3
          libfuse2
          usbutils
          udev
          curl
          ca-certificates
          gnupg
          EOF

      - name: Configure live-build (UEFI-only, disable memtest; avoid syslinux/gfxboot traps)
        shell: bash
        run: |
          set -euo pipefail
          # Clean any previous state
          sudo lb clean --purge || true

          # Configure a Noble desktop live ISO with GRUB (UEFI) only
          lb config noauto \
            --mode ubuntu \
            --architectures "${ARCH}" \
            --distribution "${SUITE}" \
            --binary-images iso-hybrid \
            --bootloader grub-efi \
            --memtest none \
            --debian-installer none \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main restricted universe multiverse" \
            --parent-mirror-bootstrap "http://archive.ubuntu.com/ubuntu/" \
            --parent-mirror-chroot "http://archive.ubuntu.com/ubuntu/" \
            --parent-mirror-chroot-security "http://security.ubuntu.com/ubuntu/" \
            --parent-mirror-binary "http://archive.ubuntu.com/ubuntu/" \
            --parent-mirror-binary-security "http://security.ubuntu.com/ubuntu/" \
            --bootappend-live "boot=casper quiet splash toram" \
            --iso-application "Ubuntu Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "${ISO_LABEL}"

          echo "====== lb config summary ======"
          cat config/* 2>/dev/null || true

      - name: Build ISO (verbose) and tee logs
        shell: bash
        run: |
          set -euo pipefail
          # Extra visibility helps debug live-build phases
          sudo env DEBIAN_FRONTEND=noninteractive lb build 2>&1 | tee logs/live-build.log
          echo "::group::Artifacts in workspace"
          ls -lah .
          echo "::endgroup::"

      - name: Rename ISO and checksums
        if: success()
        shell: bash
        run: |
          set -euo pipefail
          ISO=$(ls -1 *.hybrid.iso 2>/dev/null || true)
          if [[ -z "$ISO" ]]; then
            # live-build sometimes names like 'live-image-amd64.hybrid.iso'
            ISO=$(ls -1 live-image-*.hybrid.iso 2>/dev/null || true)
          fi
          if [[ -z "$ISO" ]]; then
            echo "Could not find built ISO"; ls -lah; exit 2
          fi
          NEW="${ISO_NAME}-${SUITE}-${ARCH}.iso"
          mv "$ISO" "$NEW"
          sha256sum "$NEW" | tee "${NEW}.sha256"

      - name: Bundle debug logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-and-config
          path: |
            logs/**
            config/**
            build-cache/release.json
            ./*.iso.sha256
            ./*.iso  # might be missing on failure; allowed

      - name: Upload ISO artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-noble-trezor-iso
          path: |
            *.iso
            *.iso.sha256
