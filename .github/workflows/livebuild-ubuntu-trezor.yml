name: Live-Build Ubuntu + Trezor Suite ISO

on:
  workflow_dispatch:
    inputs:
      ubuntu_codename:
        description: "Ubuntu codename: jammy (22.04 LTS) or noble (24.04 LTS)"
        default: "jammy"
        required: true
      disable_network_by_default:
        description: "Disable NetworkManager by default in the live session"
        type: boolean
        default: false
      trezor_tag:
        description: "Trezor Suite release tag (e.g., v25.9.3). Leave blank for latest"
        default: ""
        required: false
  schedule:
    - cron: "0 9 1 * *"  # monthly, 09:00 UTC on the 1st

permissions:
  contents: write

jobs:
  live_build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    defaults:
      run:
        shell: bash
    env:
      UBUNTU_MIRROR: "http://archive.ubuntu.com/ubuntu/"
      UBUNTU_SECURITY: "http://security.ubuntu.com/ubuntu/"
      TAILORED_ISO_NAME: "ubuntu-live-trezor.iso"

      # Trezor GitHub repo
      GH_OWNER: "trezor"
      GH_REPO: "trezor-suite"

      # Trezor signing key (KEYID + expected fingerprint)
      TREZOR_SIGNING_KEYID: "86E0D76E6D53CAC6"
      TREZOR_SIGNING_FPR:  "??PIN_THIS_FINGERPRINT??"

      # keys.openpgp.org HTTPS endpoints (we'll try fingerprint first, then keyid)
      # (we fill the path dynamically below)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Runner info (and set debug trap)
        run: |
          set -Eeuo pipefail
          trap 'CODE=$?; echo "::group::DEBUG FAIL CONTEXT"; echo "Exit: $CODE"; echo "PWD: $(pwd)"; echo "Tree (top):"; find -maxdepth 3 -type d -printf "%p\n" || true; echo "config files:"; find config -type f -maxdepth 4 -print 2>/dev/null || true; echo "::endgroup::"; exit $CODE' ERR
          uname -a || true
          lsb_release -a || true
          df -h || true
          free -h || true
          echo "Inputs: codename=${{ github.event.inputs.ubuntu_codename }}, disable_net=${{ github.event.inputs.disable_network_by_default }}, trezor_tag=${{ github.event.inputs.trezor_tag }}"

      - name: Install build tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            live-build debootstrap cdebootstrap \
            xorriso squashfs-tools genisoimage \
            dosfstools syslinux-utils isolinux \
            gpg wget curl rsync ca-certificates \
            ubuntu-keyring jq
          live-build --version || true
          jq --version

      - name: Resolve variables
        id: vars
        run: |
          set -euxo pipefail
          CODENAME="${{ github.event.inputs.ubuntu_codename || 'jammy' }}"
          DISABLE_NET="${{ github.event.inputs.disable_network_by_default == 'true' && 'true' || 'false' }}"
          TAG_INPUT="${{ github.event.inputs.trezor_tag }}"
          echo "CODENAME=$CODENAME"      >> "$GITHUB_OUTPUT"
          echo "DISABLE_NET=$DISABLE_NET" >> "$GITHUB_OUTPUT"
          echo "VOL=UBUNTU_${CODENAME}_TREZOR" >> "$GITHUB_OUTPUT"
          echo "TAG_INPUT=$TAG_INPUT" >> "$GITHUB_OUTPUT"

      - name: Clean & create config dirs
        run: |
          set -euxo pipefail
          sudo lb clean || true
          rm -rf config build-cache logs || true
          mkdir -p config/includes.chroot/opt/trezor
          mkdir -p config/includes.chroot/usr/share/applications
          mkdir -p config/includes.chroot/etc/udev/rules.d
          mkdir -p config/package-lists
          mkdir -p config/hooks/normal
          mkdir -p logs

      # ---- Write files independently (no heredoc nesting issues)
      - name: Write package list (base.list.chroot)
        run: |
          set -euxo pipefail
          cat > config/package-lists/base.list.chroot <<'EOF'
          ubuntu-standard
          casper
          linux-generic
          network-manager
          xorg
          xserver-xorg
          libfuse2
          xdg-utils
          gvfs
          udev
          EOF

      - name: Write udev rules (51-trezor.rules)
        run: |
          set -euxo pipefail
          cat > config/includes.chroot/etc/udev/rules.d/51-trezor.rules <<'EOF'
          SUBSYSTEM=="hidraw", ATTRS{idVendor}=="534c", MODE="0666"
          SUBSYSTEM=="usb",   ATTR{idVendor}=="534c", MODE="0666"
          EOF

      - name: Write desktop launcher (trezor-suite.desktop)
        run: |
          set -euxo pipefail
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Exec=/opt/trezor/trezor-suite.AppImage
          Icon=utilities-terminal
          Type=Application
          Categories=Finance;Utility;
          Terminal=false
          EOF

      - name: Optionally disable networking by default
        if: ${{ steps.vars.outputs.DISABLE_NET == 'true' }}
        run: |
          set -euxo pipefail
          mkdir -p config/includes.chroot/etc/NetworkManager/conf.d
          cat > config/includes.chroot/etc/NetworkManager/conf.d/00-offline.conf <<'EOF'
          [main]
          networking=false
          EOF

      - name: Hook to refresh initramfs
        run: |
          set -euxo pipefail
          cat > config/hooks/normal/99-update-initramfs.chroot <<'EOF'
          #!/bin/sh
          set -eux
          update-initramfs -u
          EOF
          chmod +x config/hooks/normal/99-update-initramfs.chroot

      - name: Debug print written files
        run: |
          set -euxo pipefail
          echo "::group::base.list.chroot"; nl -ba config/package-lists/base.list.chroot; echo "::endgroup::"
          echo "::group::udev"; nl -ba config/includes.chroot/etc/udev/rules.d/51-trezor.rules; echo "::endgroup::"
          echo "::group::desktop"; nl -ba config/includes.chroot/usr/share/applications/trezor-suite.desktop; echo "::endgroup::"
          if [[ "${{ steps.vars.outputs.DISABLE_NET }}" == "true" ]]; then
            echo "::group::offline.conf"; nl -ba config/includes.chroot/etc/NetworkManager/conf.d/00-offline.conf; echo "::endgroup::"
          fi

      # ---- Fetch Trezor Suite from GitHub Releases (AppImage + .asc)
      - name: Discover Trezor Suite release assets via GitHub API
        id: ghassets
        run: |
          set -euxo pipefail
          owner="${GH_OWNER}"
          repo="${GH_REPO}"
          tag_input="${{ steps.vars.outputs.TAG_INPUT }}"
          if [[ -n "$tag_input" ]]; then
            api_url="https://api.github.com/repos/${owner}/${repo}/releases/tags/${tag_input}"
          else
            api_url="https://api.github.com/repos/${owner}/${repo}/releases/latest"
          fi

          curl -sSL "$api_url" -o release.json
          echo "::group::Release metadata"; jq -r '.tag_name, .name, .assets[]?.name' release.json || true; echo "::endgroup::"

          appimage_url=$(jq -r '.assets[] | select(.name|test("AppImage$")) | .browser_download_url' release.json | head -n1)
          asc_url=$(jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .browser_download_url' release.json | head -n1)

          if [[ -z "$appimage_url" || -z "$asc_url" ]]; then
            echo "Could not find AppImage/.asc assets in the release. Assets:"; jq -r '.assets[]?.name' release.json
            exit 1
          fi

          echo "APPIMAGE_URL=$appimage_url" >> "$GITHUB_OUTPUT"
          echo "ASC_URL=$asc_url"         >> "$GITHUB_OUTPUT"

      - name: Download AppImage + signature (from GitHub Releases)
        run: |
          set -euxo pipefail
          mkdir -p build-cache
          curl -L "${{ steps.ghassets.outputs.APPIMAGE_URL }}" -o build-cache/trezor-suite.AppImage
          curl -L "${{ steps.ghassets.outputs.ASC_URL }}"      -o build-cache/trezor-suite.AppImage.asc
          ls -lh build-cache/

      # ---- Import Trezor public key over HTTPS (no keyserver)
      - name: Import Trezor public key (HTTPS) and verify fingerprint
        run: |
          set -euxo pipefail
          # Try fetching by FPR if provided, else by KEYID; both via HTTPS (no hkps)
          fpr="${TREZOR_SIGNING_FPR}"
          keyid="${TREZOR_SIGNING_KEYID}"

          mkdir -p build-cache/keys
          # try fingerprint first if you have it pinned
          if [[ "$fpr" != "??PIN_THIS_FINGERPRINT??" ]]; then
            curl -fsSL "https://keys.openpgp.org/vks/v1/by-fingerprint/${fpr}" -o build-cache/keys/trezor.asc || true
          fi
          # fallback to keyid endpoint
          if [[ ! -s build-cache/keys/trezor.asc ]]; then
            curl -fsSL "https://keys.openpgp.org/vks/v1/by-keyid/0x${keyid}" -o build-cache/keys/trezor.asc
          fi

          gpg --import build-cache/keys/trezor.asc

          # If you know the exact fingerprint, enforce it (RECOMMENDED)
          if [[ "$fpr" != "??PIN_THIS_FINGERPRINT??" ]]; then
            IMPORTED=$(gpg --with-colons --fingerprint "0x${keyid}" | awk -F: '/^fpr:/ {print $10; exit}')
            [[ "$IMPORTED" == "$fpr" ]] || { echo "Trezor key fingerprint mismatch: $IMPORTED (expected $fpr)"; exit 2; }
          else
            echo "WARNING: TREZOR_SIGNING_FPR not pinned. Set env TREZOR_SIGNING_FPR to the exact fingerprint for stronger security."
          fi

      - name: Verify AppImage signature
        run: |
          set -euxo pipefail
          gpg --batch --verify build-cache/trezor-suite.AppImage.asc build-cache/trezor-suite.AppImage
          chmod +x build-cache/trezor-suite.AppImage
          cp build-cache/trezor-suite.AppImage config/includes.chroot/opt/trezor/trezor-suite.AppImage
          echo "::group::Verify AppImage presence"; ls -l config/includes.chroot/opt/trezor/; echo "::endgroup::"

      - name: Configure live-build
        run: |
          set -euxo pipefail
          CODENAME="${{ steps.vars.outputs.CODENAME }}"
          sudo lb clean || true
          lb config \
            --mode ubuntu \
            --distribution "${CODENAME}" \
            --binary-images iso-hybrid \
            --archive-areas "main restricted universe multiverse" \
            --parent-mirror-bootstrap "${UBUNTU_MIRROR}" \
            --parent-mirror-chroot "${UBUNTU_MIRROR}" \
            --parent-mirror-chroot-security "${UBUNTU_SECURITY}" \
            --parent-mirror-binary "${UBUNTU_MIRROR}" \
            --parent-mirror-binary-security "${UBUNTU_SECURITY}" \
            --apt-recommends true \
            --debian-installer false \
            --bootappend-live "boot=casper quiet splash" \
            --linux-flavours "generic" \
            --iso-application "Ubuntu Live (Trezor Suite)" \
            --iso-volume "${{ steps.vars.outputs.VOL }}" \
            --checksums "sha256"
          echo "::group::lb config show"; ls -la config || true; echo "::endgroup::"

      - name: Build ISO (verbose)
        run: |
          set -euxo pipefail
          (time sudo lb build) 2>&1 | tee logs/live-build.log
          echo "::group::List ISOs"; ls -lh *.iso || true; echo "::endgroup::"
          LB_OUT=$(ls -1 *.iso | head -n1)
          cp "${LB_OUT}" "${TAILORED_ISO_NAME}"
          sha256sum "${TAILORED_ISO_NAME}" | tee ubuntu-live-trezor.iso.sha256

      - name: Upload ISO + checksums + logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: livebuild-output
          path: |
            ${{ env.TAILORED_ISO_NAME }}
            ubuntu-live-trezor.iso.sha256
            logs/
          retention-days: 21

      - name: Create Release
        if: ${{ success() }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: livebuild-${{ steps.vars.outputs.CODENAME }}-${{ github.run_id }}
          name: "Live-Build Ubuntu + Trezor Suite (${{ steps.vars.outputs.CODENAME }})"
          files: |
            ${{ env.TAILORED_ISO_NAME }}
            ubuntu-live-trezor.iso.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
