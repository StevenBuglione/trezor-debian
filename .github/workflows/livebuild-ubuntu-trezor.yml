name: Build Ubuntu Live ISO with Trezor Suite

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-live-iso:
    runs-on: ubuntu-latest

    # Use Debian's live-build in a container to avoid Ubuntu's legacy syslinux theme behavior
    container:
      image: debian:bookworm

    # IMPORTANT: inside containers the default shell is `sh`. Force bash to avoid "Illegal option -o pipefail".
    defaults:
      run:
        shell: bash

    env:
      CODENAME: noble
      ARCH: amd64
      ISO_NAME: ubuntu-live-trezor-${{ github.run_number }}.iso
      TREZOR_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prep APT & tools
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            live-build debootstrap xorriso squashfs-tools \
            dosfstools mtools grub-pc-bin grub-efi-amd64-bin \
            ca-certificates curl wget jq gnupg udev
          echo "libfuse2" > extra-pkgs.txt

      - name: Create project layout
        run: |
          set -euo pipefail
          rm -rf config logs build-cache auto
          mkdir -p config/includes.chroot/opt/trezor
          mkdir -p config/includes.chroot/usr/share/applications
          mkdir -p config/includes.chroot/etc/udev/rules.d
          mkdir -p config/package-lists
          mkdir -p config/hooks/normal
          mkdir -p logs build-cache auto

      - name: Add package list (base + helpers)
        run: |
          set -euo pipefail
          cat > config/package-lists/base.list.chroot <<'EOF'
          ubuntu-standard
          ubuntu-desktop-minimal
          ca-certificates
          curl
          wget
          xxd
          udev
          libfuse2
          usbutils
          EOF
          cat extra-pkgs.txt >> config/package-lists/base.list.chroot || true

      - name: Add udev rules & desktop entry
        run: |
          set -euo pipefail
          cat > config/includes.chroot/etc/udev/rules.d/51-trezor.rules <<'EOF'
          # Trezor devices
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="1209", MODE="0660", GROUP="plugdev"
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="534c", MODE="0660", GROUP="plugdev"
          KERNEL=="hidraw*", ATTRS{idVendor}=="1209", MODE="0660", GROUP="plugdev"
          KERNEL=="hidraw*", ATTRS{idVendor}=="534c", MODE="0660", GROUP="plugdev"
          EOF

          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Hardware wallet manager
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF

      - name: Fetch latest Trezor Suite + verify GPG
        run: |
          set -euo pipefail
          mkdir -p build-cache
          pushd build-cache

          # 1) Latest release assets
          rel_json="$(curl -fsSL https://api.github.com/repos/trezor/trezor-suite/releases/latest)"
          APP_URL="$(echo "$rel_json" | jq -r '.assets[] | select(.name|test("AppImage$")) | .browser_download_url' | head -n1)"
          ASC_URL="$(echo "$rel_json" | jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .browser_download_url' | head -n1)"
          if [[ -z "$APP_URL" || -z "$ASC_URL" ]]; then
            echo "Could not locate AppImage or .asc asset"; exit 2
          fi

          curl -fsSL "$APP_URL" -o trezor-suite.AppImage
          curl -fsSL "$ASC_URL" -o trezor-suite.AppImage.asc

          # 2) Import SatoshiLabs 2021 signing key (fingerprint pinned)
          set +e
          gpg --keyserver hkps://keys.openpgp.org --recv-keys "$TREZOR_FPR"
          rc=$?
          if [[ $rc -ne 0 ]]; then
            gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "$TREZOR_FPR" || true
          fi
          set -e

          if ! gpg --list-keys "$TREZOR_FPR" >/dev/null 2>&1; then
            curl -fsSL https://trezor.io/security/satoshilabs-2021-signing-key.asc -o trezor.asc
            gpg --import trezor.asc
          fi

          # 3) Verify signature; ensure VALIDSIG matches pinned fingerprint
          gpg --status-fd=1 --batch --verify trezor-suite.AppImage.asc trezor-suite.AppImage \
            | tee ../logs/gpg-status.log
          SIG_FPR="$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' ../logs/gpg-status.log)"
          [[ -z "$SIG_FPR" ]] && SIG_FPR="$(awk '/^\[GNUPG:\] VALIDSIG /{print $2; exit}' ../logs/gpg-status.log || true)"
          echo "VALIDSIG fingerprint: ${SIG_FPR}" | tee -a ../logs/gpg-status.log
          if [[ "$SIG_FPR" != "$TREZOR_FPR" ]]; then
            echo "ERROR: Signature fingerprint mismatch (got $SIG_FPR, expected $TREZOR_FPR)"; exit 5
          fi

          chmod +x trezor-suite.AppImage
          popd
          cp build-cache/trezor-suite.AppImage config/includes.chroot/opt/trezor/trezor-suite.AppImage

      - name: Write auto/config (GRUB-only, no memtest)
        run: |
          set -euo pipefail
          cat > auto/config <<'EOF'
          #!/bin/bash
          set -euo pipefail
          lb config noauto \
            --mode ubuntu \
            --architectures amd64 \
            --distribution noble \
            --binary-images iso-hybrid \
            --bootloaders "grub-pc grub-efi" \
            --uefi-secure-boot disable \
            --memtest none \
            --debian-installer false \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main restricted universe multiverse" \
            --parent-mirror-bootstrap http://archive.ubuntu.com/ubuntu/ \
            --parent-mirror-chroot    http://archive.ubuntu.com/ubuntu/ \
            --parent-mirror-chroot-security http://security.ubuntu.com/ubuntu/ \
            --parent-mirror-binary    http://archive.ubuntu.com/ubuntu/ \
            --parent-mirror-binary-security http://security.ubuntu.com/ubuntu/ \
            --bootappend-live "boot=casper quiet splash toram" \
            --iso-application "Ubuntu Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "UBUNTU_noble_TREZOR"
          EOF
          chmod +x auto/config

      - name: Optional post-install hook
        run: |
          set -euo pipefail
          cat > config/hooks/normal/00-post-install.chroot <<'EOF'
          #!/bin/bash
          set -euo pipefail
          chmod +x /opt/trezor/trezor-suite.AppImage || true
          systemctl enable systemd-udevd.service || true
          EOF
          chmod +x config/hooks/normal/00-post-install.chroot

      - name: Prebuild debug
        run: |
          set -euo pipefail
          echo "===== Environment ====="
          uname -a || true
          cat /etc/os-release || true
          echo "===== live-build version ====="
          lb --version || true
          echo "===== tree: config ====="
          find config -maxdepth 3 -type f -print | sort || true

      - name: Build ISO (GRUB-only)
        run: |
          set -euo pipefail
          lb clean --purge || true
          ./auto/config
          time lb build 2>logs/live-build-stderr.log | tee logs/live-build.log
          mv binary.hybrid.iso "${ISO_NAME}" 2>/dev/null || mv binary.iso "${ISO_NAME}"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: live-iso-and-logs
          path: |
            ${{ env.ISO_NAME }}
            logs/
          retention-days: 7
