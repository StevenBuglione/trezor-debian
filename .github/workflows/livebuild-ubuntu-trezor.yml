name: Build Ubuntu Live ISO with Trezor Suite

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-live-iso:
    # Use a modern live-build from Debian to avoid Ubuntu's old syslinux theme logic
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm

    env:
      CODENAME: noble
      ARCH: amd64
      ISO_NAME: ubuntu-live-trezor-${{ github.run_number }}.iso
      # SatoshiLabs 2021 Signing Key fingerprint (must match VALIDSIG)
      TREZOR_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prep APT & tools
        run: |
          set -euxo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            live-build debootstrap xorriso squashfs-tools \
            dosfstools mtools grub-pc-bin grub-efi-amd64-bin \
            ca-certificates curl wget jq gnupg udev
          # Helpful for AppImage execution inside the live system
          # (libfuse2 for AppImage runtime compatibility)
          echo "libfuse2" > extra-pkgs.txt

      - name: Create project layout
        run: |
          set -euxo pipefail
          rm -rf config logs build-cache auto
          mkdir -p config/includes.chroot/opt/trezor
          mkdir -p config/includes.chroot/usr/share/applications
          mkdir -p config/includes.chroot/etc/udev/rules.d
          mkdir -p config/package-lists
          mkdir -p config/hooks/normal
          mkdir -p logs build-cache auto

      - name: Add package list (base + helpers)
        run: |
          set -euxo pipefail
          # Core desktop & helpers for Suite to run nicely; keep it minimal
          cat > config/package-lists/base.list.chroot <<'EOF'
          ubuntu-standard
          ubuntu-desktop-minimal
          ca-certificates
          curl
          wget
          xxd
          udev
          # AppImage runtime (needed for many AppImages on Ubuntu)
          libfuse2
          # optional USB debugging tools
          usbutils
          EOF
          # Append any extras
          cat extra-pkgs.txt >> config/package-lists/base.list.chroot || true

      - name: Add udev rules & desktop entry
        run: |
          set -euxo pipefail
          # Trezor udev rules (from upstream)
          cat > config/includes.chroot/etc/udev/rules.d/51-trezor.rules <<'EOF'
          # Trezor devices
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="1209", MODE="0660", GROUP="plugdev"
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="534c", MODE="0660", GROUP="plugdev"
          KERNEL=="hidraw*", ATTRS{idVendor}=="1209", MODE="0660", GROUP="plugdev"
          KERNEL=="hidraw*", ATTRS{idVendor}=="534c", MODE="0660", GROUP="plugdev"
          EOF

          # Desktop launcher
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Hardware wallet manager
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF

      - name: Fetch latest Trezor Suite + verify GPG
        run: |
          set -euxo pipefail
          mkdir -p build-cache
          pushd build-cache

          # 1) Query latest release assets from GitHub
          rel_json="$(curl -fsSL https://api.github.com/repos/trezor/trezor-suite/releases/latest)"
          # Find linux AppImage + .asc
          APP_URL="$(echo "$rel_json" | jq -r '.assets[] | select(.name|test("AppImage$")) | .browser_download_url' | head -n1)"
          ASC_URL="$(echo "$rel_json" | jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .browser_download_url' | head -n1)"

          if [ -z "$APP_URL" ] || [ -z "$ASC_URL" ]; then
            echo "Could not locate AppImage or signature from GitHub releases API"
            exit 2
          fi

          curl -fsSL "$APP_URL" -o trezor-suite.AppImage
          curl -fsSL "$ASC_URL" -o trezor-suite.AppImage.asc

          # 2) Obtain SatoshiLabs 2021 Signing Key (multi-source, pinned FPR)
          # Try keyservers first; fall back to publisher-hosted key if needed.
          set +e
          gpg --keyserver hkps://keys.openpgp.org --recv-keys "$TREZOR_FPR"
          rc1=$?
          if [ $rc1 -ne 0 ]; then
            gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys "$TREZOR_FPR" || true
          fi
          set -e

          if ! gpg --list-keys "$TREZOR_FPR" > /dev/null 2>&1; then
            # Fallback: fetch publisher key (still verify fingerprint!)
            curl -fsSL https://trezor.io/security/satoshilabs-2021-signing-key.asc -o trezor.asc
            gpg --import trezor.asc
          fi

          # 3) Verify signature & pin VALIDSIG fingerprint
          gpg --status-fd=1 --batch --verify trezor-suite.AppImage.asc trezor-suite.AppImage \
            | tee ../logs/gpg-status.log
          # Extract VALIDSIG (field 2 or 3 depending on gpg)
          SIG_FPR="$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' ../logs/gpg-status.log)"
          [ -z "$SIG_FPR" ] && SIG_FPR="$(awk '/^\[GNUPG:\] VALIDSIG /{print $2; exit}' ../logs/gpg-status.log || true)"
          echo "VALIDSIG fingerprint: ${SIG_FPR}" | tee -a ../logs/gpg-status.log

          if [ "$SIG_FPR" != "$TREZOR_FPR" ]; then
            echo "ERROR: Signature fingerprint mismatch (got $SIG_FPR, expected $TREZOR_FPR)"
            exit 5
          fi

          chmod +x trezor-suite.AppImage
          popd

          # Place AppImage in the live system
          cp build-cache/trezor-suite.AppImage config/includes.chroot/opt/trezor/trezor-suite.AppImage

      - name: Write auto/config (GRUB-only, no memtest)
        run: |
          set -euxo pipefail
          cat > auto/config <<'EOF'
          #!/bin/sh
          set -e
          lb config noauto \
            --mode ubuntu \
            --architectures amd64 \
            --distribution noble \
            --binary-images iso-hybrid \
            --bootloaders "grub-pc grub-efi" \
            --uefi-secure-boot disable \
            --memtest none \
            --debian-installer false \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main restricted universe multiverse" \
            --parent-mirror-bootstrap http://archive.ubuntu.com/ubuntu/ \
            --parent-mirror-chroot    http://archive.ubuntu.com/ubuntu/ \
            --parent-mirror-chroot-security http://security.ubuntu.com/ubuntu/ \
            --parent-mirror-binary    http://archive.ubuntu.com/ubuntu/ \
            --parent-mirror-binary-security http://security.ubuntu.com/ubuntu/ \
            --bootappend-live "boot=casper quiet splash toram" \
            --iso-application "Ubuntu Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "UBUNTU_${CODENAME}_TREZOR"
          EOF
          chmod +x auto/config

      - name: (Optional) preseed minimal desktop defaults
        run: |
          set -euxo pipefail
          # Keep the image lean; you can add more hooks here as needed
          cat > config/hooks/normal/00-post-install.chroot <<'EOF'
          #!/bin/sh
          set -euxo pipefail
          # Make AppImage executable and visible to all users
          chmod +x /opt/trezor/trezor-suite.AppImage || true
          # Ensure udev is reloaded at boot
          systemctl enable systemd-udevd.service || true
          EOF
          chmod +x config/hooks/normal/00-post-install.chroot

      - name: Add debug helper script (runs pre/post build)
        run: |
          set -euxo pipefail
          mkdir -p scripts
          cat > scripts/debug.sh <<'EOF'
          #!/usr/bin/env bash
          set -euxo pipefail
          echo "===== Environment ====="
          uname -a || true
          cat /etc/os-release || true
          echo "===== live-build version ====="
          lb --version || true
          which lb || true
          echo "===== lb config print ====="
          ( set +e; lb config --help >/dev/null 2>&1; echo "lb config ok=$?"; set -e )
          echo "===== tree: config ====="
          find config -maxdepth 3 -type f -print | sort || true
          echo "===== APT sources (host) ====="
          cat /etc/apt/sources.list || true
          ls -l /etc/apt/sources.list.d || true
          EOF
          chmod +x scripts/debug.sh
          ./scripts/debug.sh | tee logs/prebuild-debug.txt

      - name: Build ISO (GRUB-only)
        run: |
          set -euxo pipefail
          # Clean; then build with full logs
          lb clean --purge || true
          # Generate config tree
          ./auto/config
          # Build (capture log)
          time lb build 2>logs/live-build-stderr.log | tee logs/live-build.log
          # Move final ISO into root for artifact upload
          mv binary.hybrid.iso "${ISO_NAME}" || mv binary.iso "${ISO_NAME}"

      - name: Post-build diagnostics
        if: always()
        run: |
          set -euxo pipefail
          echo "===== Contents of binary dir ====="
          ls -lah || true
          echo "===== Log snippets ====="
          tail -n +1 logs/*.log || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: live-iso-and-logs
          path: |
            ${{ env.ISO_NAME }}
            logs/
          retention-days: 7
