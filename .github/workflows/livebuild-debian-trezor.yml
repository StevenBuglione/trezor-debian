name: Build Debian Live ISO with Trezor Suite

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * 1" # weekly Monday 06:00 UTC for security updates

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm
    env:
      # Expected primary fingerprint of "SatoshiLabs 2021 Signing Key"
      TREZOR_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"
      # Pattern we use to select the linux x86_64 AppImage assets from GitHub Releases
      APPIMAGE_PATTERN: "linux.*x86_64.*AppImage"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install host dependencies
        shell: bash
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            ca-certificates curl jq xz-utils gnupg dirmngr gpg-agent \
            live-build debootstrap squashfs-tools xorriso dosfstools \
            grub-pc-bin grub-efi-amd64-bin shim-signed isolinux syslinux-common \
            desktop-file-utils udev
          # Sanity info
          lb --version || true
          dpkg -l | grep -E 'live-build|debootstrap|grub|isolinux|syslinux' || true

      - name: Prepare live-build config tree
        shell: bash
        run: |
          set -euo pipefail
          install -d config/includes.chroot/opt/trezor
          install -d config/includes.chroot/etc/udev/rules.d
          install -d config/includes.chroot/usr/share/applications
          install -d config/hooks/normal
          install -d config/package-lists
          install -d logs build-cache

          # Desktop entry for Trezor Suite
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Trezor hardware wallet manager
          Exec=/opt/trezor/trezor-suite.AppImage
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF

          # Ensure the AppImage is executable inside the live system
          cat > config/hooks/normal/99-trezor-perms.chroot <<'EOF'
          #!/bin/sh
          set -e
          chmod +x /opt/trezor/trezor-suite.AppImage || true
          EOF
          chmod +x config/hooks/normal/99-trezor-perms.chroot

          # Minimal package list for GUI + AppImage support in the live system
          # XFCE desktop + libfuse2 (AppImage requirement)
          cat > config/package-lists/desktop.list.chroot <<'EOF'
          task-xfce-desktop
          live-task-xfce
          lightdm
          xterm
          libfuse2
          usbutils
          libusb-1.0-0
          ca-certificates
          curl
          EOF

      - name: Fetch udev rules (official Trezor)
        shell: bash
        run: |
          set -euo pipefail
          # Official udev rules are published at data.trezor.io
          # We'll embed them into the live ISO at /etc/udev/rules.d/
          curl -fsSL https://data.trezor.io/udev/51-trezor.rules \
            -o config/includes.chroot/etc/udev/rules.d/51-trezor.rules

      - name: Fetch latest Trezor Suite assets (GitHub API)
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          cd build-cache

          # Query latest release assets
          rel_json="$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" \
                               -H "Accept: application/vnd.github+json" \
                               https://api.github.com/repos/trezor/trezor-suite/releases/latest)"

          # Pick linux x86_64 AppImage and its .asc by regex
          app_url=$(echo "$rel_json" | jq -r --arg re "${APPIMAGE_PATTERN}" '.assets[] | select((.name|test($re)) and (.name|endswith(".AppImage"))) | .browser_download_url' | head -n1)
          asc_url=$(echo "$rel_json" | jq -r --arg re "${APPIMAGE_PATTERN}" '.assets[] | select((.name|test($re)) and (.name|endswith(".AppImage.asc"))) | .browser_download_url' | head -n1)

          if [ -z "${app_url}" ] || [ -z "${asc_url}" ]; then
            echo "Could not find AppImage or .asc in latest release assets"; exit 20
          fi

          echo "AppImage: $app_url"
          echo "Signature: $asc_url"

          curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -L "${app_url}" -o trezor-suite.AppImage
          curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -L "${asc_url}" -o trezor-suite.AppImage.asc

      - name: Verify Trezor Suite signature (WKD + fingerprint pin)
        shell: bash
        run: |
          set -euo pipefail
          cd build-cache

          # Import SatoshiLabs 2021 signing key via WKD (security@trezor.io)
          # Requires dirmngr; we installed it. Then verify signature.
          gpg --batch --locate-keys security@trezor.io

          # Quick show of imported key (for logs)
          IMPORTED_FPR="$(gpg --with-colons --fingerprint | awk -F: '/^fpr:/{print $10; exit}')"
          echo "Imported key fingerprint: ${IMPORTED_FPR:-<none>}"

          # Verify signature and capture machine-parsable status
          gpg --status-fd=1 --batch --verify trezor-suite.AppImage.asc trezor-suite.AppImage \
              | tee ../logs/gpg-status.log

          # Parse VALIDSIG fingerprint from status line:
          SIG_FPR="$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' ../logs/gpg-status.log)"
          echo "VALIDSIG fingerprint: ${SIG_FPR:-<none>}"

          # Also count GOODSIG lines as a sanity check
          SIG_GOOD="$(awk 'BEGIN{c=0} /^\[GNUPG:\] GOODSIG /{c++} END{print c}' ../logs/gpg-status.log)"
          echo "GOODSIG count: ${SIG_GOOD}"

          if [ "${SIG_GOOD}" -lt 1 ] || [ -z "${SIG_FPR}" ]; then
            echo "Signature verification did not succeed"; exit 5
          fi

          # Pin to the documented SatoshiLabs 2021 fingerprint
          if [ "${SIG_FPR}" != "${TREZOR_FPR}" ]; then
            echo "Fingerprint mismatch! Expected ${TREZOR_FPR} but got ${SIG_FPR}"; exit 6
          fi

          # Stage into the live filesystem
          chmod +x trezor-suite.AppImage
          cp trezor-suite.AppImage ../config/includes.chroot/opt/trezor/trezor-suite.AppImage

      - name: Configure live-build (bookworm)
        shell: bash
        run: |
          set -euo pipefail
          # Clean any previous state
          lb clean --purge || true

          # NOTE: Do NOT pass --bootloaders (older live-builds choke on it).
          # Let live-build handle BIOS/UEFI automatically. We also skip d-i and memtest.
          lb config noauto \
            --mode debian \
            --architectures amd64 \
            --distribution bookworm \
            --binary-images iso-hybrid \
            --memtest none \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main contrib non-free-firmware" \
            --mirror-bootstrap http://deb.debian.org/debian \
            --mirror-chroot    http://deb.debian.org/debian \
            --mirror-binary    http://deb.debian.org/debian \
            --mirror-chroot-security http://deb.debian.org/debian-security \
            --mirror-binary-security http://deb.debian.org/debian-security \
            --security true \
            --bootappend-live "boot=live components quiet splash" \
            --iso-application "Debian Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "DEBIAN_bookworm_TREZOR" \
            --checksums sha256

          # Log the computed config for troubleshooting
          find config -maxdepth 2 -type f -print | sort | sed 's/^/[config] /' | tee -a logs/config-files.log

      - name: Build ISO (verbose logs)
        shell: bash
        run: |
          set -euo pipefail
          # live-build is chatty; we save its output
          lb build 2>logs/live-build-stderr.log | tee logs/live-build.log

      - name: Collect artifacts
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          cp -v logs/* artifacts/ || true
          # Typical Debian ISO name:
          #   live-image-amd64.hybrid.iso  (but list whatever produced)
          ls -alh
          ls -alh *.iso || true
          # Copy any .iso to artifacts
          for f in *.iso live-image-*.iso live-image-*.hybrid.iso; do
            [ -f "$f" ] && cp -v "$f" "artifacts/$f"
          done

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debian-trezor-iso-and-logs
          path: artifacts
          if-no-files-found: warn
