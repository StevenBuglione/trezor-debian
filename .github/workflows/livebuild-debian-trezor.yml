name: Remaster Fedora Live ISO with Trezor Suite (official path)

on:
  workflow_dispatch:
    inputs:
      fedora_major:
        description: 'Fedora major version (e.g., 41). Leave empty for latest container.'
        required: false
        default: ""
      trezor_tag:
        description: 'Optional: Trezor Suite tag (e.g., v25.9.3). Empty = latest.'
        required: false
        default: ""
  schedule:
    - cron: "0 8 1 * *" # monthly

permissions:
  contents: read

jobs:
  build-fedora-live:
    # Run the whole job inside Fedora so we can use dnf + livecd-creator directly
    runs-on: ubuntu-24.04
    container:
      image: fedora:latest

    env:
      ISO_LABEL: FEDORA_TREZOR
      ISO_BASENAME: fedora-live-trezor
      # SatoshiLabs 2021 signing key (must match VALIDISG)
      TREZOR_FPR: EB483B26B078A4AA1B6F425EE21B6950A2ECB65C
      TREZOR_KEY_URL: https://trezor.io/security/satoshilabs-2021-signing-key.asc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install official live image toolchain
        run: |
          set -euo pipefail
          dnf -y update
          # Official path per Fedora Quick Docs: livecd-creator + spin-kickstarts + ksflatten
          dnf -y install livecd-tools spin-kickstarts pykickstart \
                         xorriso isomd5sum squashfs-tools \
                         jq curl gnupg2
          rpm -E '%fedora' | tee FEDORA_VER.txt

      - name: Create Kickstart overlay (adds Trezor + AppImage fetch & verify)
        run: |
          set -euo pipefail
          FEDORA_VER=$(cat FEDORA_VER.txt)
          TREZOR_TAG="${{ github.event.inputs.trezor_tag }}"

          cat > trezor-overlay.ks <<'KS'
          # Include the official Workstation live configuration (Fedora 21+)
          %include /usr/share/spin-kickstarts/fedora-live-workstation.ks

          # Ensure tools we need inside the image
          %packages
          # udev rules for Trezor (official Fedora package)
          trezor-common
          # AppImage needs FUSE v2 (libfuse.so.2) on Fedora -> fuse-libs provides it
          fuse-libs
          # fetch/verify helpers used in %post
          curl
          jq
          gnupg2
          %end

          %post --log=/root/trezor-post.log
          set -euo pipefail

          TREZOR_TAG="@TREZOR_TAG@"
          TREZOR_KEY_URL="@TREZOR_KEY_URL@"
          TREZOR_FPR="@TREZOR_FPR@"

          mkdir -p /opt/trezor
          cd /opt/trezor

          # Import SatoshiLabs signing key
          curl -fsSL "$TREZOR_KEY_URL" -o trezor.asc
          gpg2 --batch --import trezor.asc || gpg --batch --import trezor.asc

          # Pick release (latest or pinned tag) and fetch AppImage + .asc
          if [ -n "$TREZOR_TAG" ]; then
            REL_API="https://api.github.com/repos/trezor/trezor-suite/releases/tags/${TREZOR_TAG}"
          else
            REL_API="https://api.github.com/repos/trezor/trezor-suite/releases/latest"
          fi

          curl -fsSL "$REL_API" -o /tmp/release.json
          APP_URL=$(jq -r '.assets[] | select(.name|test("linux.*AppImage$")) | .browser_download_url' /tmp/release.json | head -n1)
          ASC_URL=$(jq -r '.assets[] | select(.name|test("linux.*AppImage.asc$")) | .browser_download_url' /tmp/release.json | head -n1)
          [ -n "$APP_URL" ] && [ -n "$ASC_URL" ] || { echo "Could not locate AppImage or .asc in release assets"; exit 12; }

          curl -fsSLo trezor-suite.AppImage "$APP_URL"
          curl -fsSLo trezor-suite.AppImage.asc "$ASC_URL"
          chmod +x trezor-suite.AppImage

          # Verify signature and *pin* the fingerprint
          gpg2 --batch --status-fd=1 --verify trezor-suite.AppImage.asc trezor-suite.AppImage \
            1> /tmp/gpg-status.log 2> /tmp/gpg-stderr.log || true
          SIG_FPR=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' /tmp/gpg-status.log)
          [ -n "$SIG_FPR" ] && [ "$SIG_FPR" = "$TREZOR_FPR" ] || { echo "Signature fingerprint mismatch: $SIG_FPR"; exit 14; }

          # Desktop entry
          install -d /usr/share/applications
          cat > /usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Manage your Trezor hardware wallet
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF

          # udev rules come from trezor-common; ensure udev reload will succeed at runtime
          # (udev will pick rules automatically on a running system)
          %end
          KS

          # Inject runtime values
          sed -i \
            -e "s|@TREZOR_TAG@|${TREZOR_TAG}|g" \
            -e "s|@TREZOR_KEY_URL@|${TREZOR_KEY_URL}|g" \
            -e "s|@TREZOR_FPR@|${TREZOR_FPR}|g" \
            trezor-overlay.ks

          # Optional: validate syntax
          ksvalidator trezor-overlay.ks

      - name: Flatten Kickstart (per docs) and build ISO with livecd-creator
        run: |
          set -euo pipefail
          FEDORA_VER=$(cat FEDORA_VER.txt)
          # Flatten any %include into a single ks as Quick Docs show
          ksflatten -c trezor-overlay.ks -o trezor-flat.ks

          # Build the ISO (this needs root; we're root in the Fedora container)
          livecd-creator --verbose \
            --config=trezor-flat.ks \
            --fslabel="${ISO_LABEL}" \
            --releasever="${FEDORA_VER}" \
            --cache=/var/cache/live

          # Find the resulting ISO and rename consistently
          ISO="$(ls -1 *.iso | head -n1)"
          test -n "$ISO"
          OUT="${ISO_BASENAME}-F${FEDORA_VER}-x86_64.iso"
          mv "$ISO" "$OUT"
          sha256sum "$OUT" | tee "$OUT.sha256"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trezor-fedora-iso-and-logs
          path: |
            *.iso
            *.iso.sha256
            trezor-overlay.ks
            trezor-flat.ks
            FEDORA_VER.txt
          retention-days: 14
