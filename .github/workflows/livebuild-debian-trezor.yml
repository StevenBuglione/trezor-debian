name: Fedora Live ISO with Trezor Suite

on:
  workflow_dispatch:
    inputs:
      fedora_major:
        description: 'Fedora release (e.g., 42). Leave empty for latest.'
        required: false
        default: ""
      trezor_tag:
        description: 'Optional Trezor Suite tag (e.g., v25.9.3). Empty = latest.'
        required: false
        default: ""
  schedule:
    - cron: "0 8 1 * *" # monthly

permissions:
  contents: write   # needed to create releases & upload assets

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      ISO_LABEL: FEDORA_TREZOR
      ISO_BASENAME: fedora-live-trezor
      TREZOR_FPR: EB483B26B078A4AA1B6F425EE21B6950A2ECB65C
      TREZOR_KEY_URL: https://trezor.io/security/satoshilabs-2021-signing-key.asc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq gnupg

      - name: Prepare output dir
        run: mkdir -p out scripts/fedora-live/vendor

      - name: Prefetch Trezor Suite (host-side) + signing key
        id: trezor_prefetch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG="${{ github.event.inputs.trezor_tag }}"
          API="https://api.github.com/repos/trezor/trezor-suite/releases"
          URL="${API}/latest"
          if [ -n "${TAG}" ]; then URL="${API}/tags/${TAG}"; fi

          # Fetch release JSON with auth to avoid rate-limits
          curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" \
                      -H "Accept: application/vnd.github+json" \
                      "$URL" -o release.json

          # Extract Trezor Suite version info
          TREZOR_VERSION=$(jq -r '.tag_name // .name // .id // empty' release.json)
          if [ -z "${TREZOR_VERSION}" ]; then
            echo "Failed to extract Trezor Suite version" >&2
            exit 1
          fi

          APP_URL=$(jq -r '.assets[] | select(.name|test("linux.*(x86_64|amd64|x64).*AppImage$")) | .browser_download_url' release.json | head -n1)
          ASC_URL=$(jq -r '.assets[] | select(.name|test("linux.*(x86_64|amd64|x64).*AppImage.asc$")) | .browser_download_url' release.json | head -n1)
          if [ -z "${APP_URL}" ] || [ -z "${ASC_URL}" ]; then
            echo "Could not find AppImage assets in release:" >&2
            jq -r '.assets[]?.name' release.json || true
            exit 20
          fi

          # Download assets with auth header following redirects
          curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -L "$APP_URL" -o scripts/fedora-live/vendor/trezor-suite.AppImage
          curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -L "$ASC_URL" -o scripts/fedora-live/vendor/trezor-suite.AppImage.asc
          chmod +x scripts/fedora-live/vendor/trezor-suite.AppImage

          # Signing key (best-effort)
          for U in \
            "https://trezor.io/security/satoshilabs-2021-signing-key.asc" \
            "https://data.trezor.io/security/satoshilabs-2021-signing-key.asc" \
          ; do
            if curl -fsSL "$U" -o scripts/fedora-live/vendor/trezor.asc; then
              break
            fi
          done

          # Optional host-side verification (best-effort)
          if command -v gpg >/dev/null 2>&1 && [ -s scripts/fedora-live/vendor/trezor.asc ]; then
            GNUPGHOME="$(mktemp -d)"
            export GNUPGHOME
            gpg --batch --import scripts/fedora-live/vendor/trezor.asc || true
            gpg --batch --status-fd=1 --verify scripts/fedora-live/vendor/trezor-suite.AppImage.asc scripts/fedora-live/vendor/trezor-suite.AppImage \
              1> gpg-status.log 2> gpg-stderr.log || true
            FPR=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' gpg-status.log || true)
            echo "Host-side VALIDSIG: ${FPR:-<none>}"
          fi

          echo "trezor_version=${TREZOR_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Build inside Fedora container (privileged for loop devices)
        env:
          FED_INPUT: ${{ github.event.inputs.fedora_major }}
          TREZOR_TAG_INPUT: ${{ github.event.inputs.trezor_tag }}
        run: |
          set -euo pipefail
          IMG="fedora:${FED_INPUT:-latest}"

          docker run --rm --privileged \
            -v "$PWD":/workspace -w /workspace \
            -v /dev:/dev \
            -e ISO_LABEL \
            -e ISO_BASENAME \
            -e TREZOR_FPR \
            -e TREZOR_KEY_URL \
            -e TREZOR_TAG="${TREZOR_TAG_INPUT}" \
            "${IMG}" bash /workspace/scripts/fedora-live/build-fedora-live-trezor.sh

      - name: Compute checksums
        run: |
          set -euo pipefail
          cd out
          shopt -s nullglob
          for f in *.iso; do
            sha256sum "$f" > "$f.sha256"
          done
          ls -lh

      - name: Collect artifact metadata (iso name/size/hash)
        id: artifact_meta
        run: |
          set -euo pipefail
          ISO_PATH="$(ls -1 out/*.iso | head -n1)"
          ISO_NAME="$(basename "$ISO_PATH")"
          ISO_SIZE_HUMAN="$(du -h "$ISO_PATH" | awk '{print $1}')"
          ISO_SHA256="$(sha256sum "$ISO_PATH" | awk '{print $1}')"
          echo "iso_name=${ISO_NAME}" >> "$GITHUB_OUTPUT"
          echo "iso_size=${ISO_SIZE_HUMAN}" >> "$GITHUB_OUTPUT"
          echo "iso_sha256=${ISO_SHA256}" >> "$GITHUB_OUTPUT"

      - name: Derive Fedora version & arch (for release notes)
        id: meta
        env:
          FED_INPUT: ${{ github.event.inputs.fedora_major }}
        run: |
          set -euo pipefail
          ARCH="$(uname -m)"
          if [ -n "${FED_INPUT}" ]; then
            FEDORA_VERSION="${FED_INPUT}"
          else
            FEDORA_VERSION="$(docker run --rm fedora:latest bash -lc 'source /etc/os-release && echo ${VERSION_ID}')"
          fi
          [ -n "${FEDORA_VERSION}" ] || FEDORA_VERSION="unknown"
          echo "arch=${ARCH}" >> "$GITHUB_OUTPUT"
          echo "fedora_version=${FEDORA_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts (CI browsing convenience)
        uses: actions/upload-artifact@v4
        with:
          name: trezor-fedora-iso
          path: out
          retention-days: 14

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.meta.outputs.fedora_version }}-trezor-${{ steps.trezor_prefetch.outputs.trezor_version }}-${{ github.run_number }}
          name: Fedora ${{ steps.meta.outputs.fedora_version }} + Trezor Suite ${{ steps.trezor_prefetch.outputs.trezor_version }} (arch - ${{ steps.meta.outputs.arch }})
          body: |
            ## Fedora Live ISO with Trezor Suite

            **Fedora Version:** ${{ steps.meta.outputs.fedora_version }}  
            **Trezor Suite Version:** ${{ steps.trezor_prefetch.outputs.trezor_version }}  
            **Architecture:** ${{ steps.meta.outputs.arch }}  
            **Image:** `${{ steps.artifact_meta.outputs.iso_name }}` (${% raw %}${{ steps.artifact_meta.outputs.iso_size }}{% endraw %})  
            **SHA256:** `${{ steps.artifact_meta.outputs.iso_sha256 }}`

            ### Whatâ€™s inside
            - Fedora Live environment, pre-bundled with Trezor Suite AppImage
            - Trezor signing key included for runtime verification
            - Wayland/XWayland + LXQt desktop setup

            ### How to use
            1. Download the `.iso` and the corresponding `.sha256`.
            2. Verify integrity:  
               ```bash
               sha256sum -c *.iso.sha256
               ```
            3. Flash the ISO to a USB (e.g., Fedora Media Writer, Balena Etcher, or `dd`).
            4. Boot the target machine from USB.

            ### Notes
            - BIP-39 seed words are uniquely identified by their first four letters; Trezor supports 4-letter entry during recovery.
            - For long-term backups, full words are safest for cross-tool compatibility.

            _Built by ${{ github.workflow }} run #${{ github.run_number }}._
          draft: false
          prerelease: false
          files: |
            out/*.iso
            out/*.iso.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
