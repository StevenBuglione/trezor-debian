name: Build Debian Live ISO with Trezor Suite

on:
  workflow_dispatch:
    inputs:
      trezor_tag:
        description: "Optional: pin a specific Trezor Suite tag (e.g., v25.9.3). Leave empty for latest."
        required: false
        default: ""
  schedule:
    - cron: "0 8 1 * *"   # monthly rebuild

permissions:
  contents: read

jobs:
  build-debian-live:
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    env:
      SUITE: bookworm
      ARCH: amd64
      ISO_BASENAME: debian-live-trezor
      ISO_LABEL: DEBIAN_bookworm_TREZOR
      # SatoshiLabs 2021 key (release signatureâ€™s VALIDSIG must match this)
      TREZOR_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"
      TREZOR_KEY_URL: "https://trezor.io/security/satoshilabs-2021-signing-key.asc"
      TREZOR_UDEV_URL: "https://data.trezor.io/udev/51-trezor.rules"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            live-build debootstrap \
            xorriso squashfs-tools dosfstools mtools \
            grub-pc-bin grub-efi-amd64-bin \
            syslinux-common isolinux \
            ca-certificates curl wget jq file libfuse2 \
            gnupg dirmngr gpg-agent udev

      - name: Prepare config tree
        run: |
          set -euo pipefail
          rm -rf config logs build-cache auto
          mkdir -p config/includes.chroot/opt/trezor
          mkdir -p config/includes.chroot/usr/share/applications
          mkdir -p config/includes.chroot/etc/udev/rules.d
          mkdir -p config/hooks/normal
          mkdir -p config/package-lists
          mkdir -p logs build-cache auto

      - name: Package list (XFCE + essentials)
        run: |
          set -euo pipefail
          cat > config/package-lists/desktop.list.chroot <<'EOF'
          task-xfce-desktop
          network-manager
          xorg
          policykit-1
          libfuse2
          usbutils
          udev
          curl
          ca-certificates
          gnupg
          EOF

      - name: udev rules & desktop launcher
        run: |
          set -euo pipefail
          curl -fsSL "${TREZOR_UDEV_URL}" -o config/includes.chroot/etc/udev/rules.d/51-trezor.rules
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Manage your Trezor hardware wallet
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF

      # --- Authenticated GitHub Release Assets download (avoids 403/rate-limit) ---
      - name: Fetch Trezor Suite assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mkdir -p build-cache
          TAG="${{ github.event.inputs.trezor_tag }}"
          API_VER="2022-11-28"
          API_URL=${TAG:+https://api.github.com/repos/trezor/trezor-suite/releases/tags/${TAG}}
          API_URL=${API_URL:-https://api.github.com/repos/trezor/trezor-suite/releases/latest}
          echo "Querying release: $API_URL"
          curl -fsSL \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: ${API_VER}" \
            -H "User-Agent: actions/${GITHUB_RUN_ID}" \
            "$API_URL" -o build-cache/release.json

          APP_ID=$(jq -r '.assets[] | select(.name|test("AppImage$")) | .id' build-cache/release.json | head -n1)
          ASC_ID=$(jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .id' build-cache/release.json | head -n1)
          test -n "$APP_ID" && test -n "$ASC_ID" || { echo "AppImage/.asc not found"; jq -r '.assets[]?.name' build-cache/release.json; exit 1; }

          dl() {
            local id="$1" out="$2" tries=6 delay=2
            for i in $(seq 1 $tries); do
              echo "Attempt $i: asset $id -> $out"
              if curl -fsSLo "$out" -D headers.txt \
                   -H "Authorization: Bearer ${GH_TOKEN}" \
                   -H "Accept: application/octet-stream" \
                   -H "X-GitHub-Api-Version: ${API_VER}" \
                   -H "User-Agent: actions/${GITHUB_RUN_ID}" \
                   "https://api.github.com/repos/trezor/trezor-suite/releases/assets/${id}"; then
                rm -f headers.txt; return 0
              fi
              status=$(awk 'toupper($1$2)=="HTTP/1.1"||toupper($1$2)=="HTTP/2"{print $3}' headers.txt | tail -n1 || true)
              remain=$(grep -i '^x-ratelimit-remaining:' headers.txt | awk '{print $2}' | tr -d '\r' || true)
              retry_after=$(grep -i '^retry-after:' headers.txt | awk '{print $2}' | tr -d '\r' || true)
              echo "HTTP: ${status:-?}  remaining: ${remain:-?}  retry-after: ${retry_after:-?}"
              rm -f headers.txt
              sleep "${retry_after:-$delay}"; delay=$((delay*2))
            done
            return 1
          }

          dl "$APP_ID" build-cache/trezor-suite.AppImage
          dl "$ASC_ID" build-cache/trezor-suite.AppImage.asc

          file build-cache/trezor-suite.AppImage || true
          chmod +x build-cache/trezor-suite.AppImage
          cp build-cache/trezor-suite.AppImage config/includes.chroot/opt/trezor/trezor-suite.AppImage

      # --- STRICT, PINNED SIGNATURE CHECK (no keyserver/WKD) ---
      - name: Import SatoshiLabs key & verify AppImage signature
        run: |
          set -euo pipefail
          export GNUPGHOME="$PWD/build-cache/gnupg"
          mkdir -p "$GNUPGHOME"; chmod 700 "$GNUPGHOME"
          curl -fsSL "${TREZOR_KEY_URL}" -o build-cache/trezor.asc
          gpg --batch --import build-cache/trezor.asc
          gpg --status-fd=1 --batch --verify \
              build-cache/trezor-suite.AppImage.asc build-cache/trezor-suite.AppImage \
              1> logs/gpg-status.log 2> logs/gpg-stderr.log || true
          GOODSIG=$(awk 'BEGIN{c=0} /^\[GNUPG:\] GOODSIG /{c++} END{print c}' logs/gpg-status.log)
          SIG_FPR=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' logs/gpg-status.log)
          echo "GOODSIG count: ${GOODSIG:-0}"
          echo "VALIDSIG fingerprint: ${SIG_FPR:-missing}"
          [[ "${GOODSIG:-0}" -ge 1 && -n "$SIG_FPR" && "$SIG_FPR" == "$TREZOR_FPR" ]] || {
            echo "Signature failed or fingerprint mismatch"; exit 5; }

      - name: Post-install hook (AppImage perms) + APT sources sanitizer
        run: |
          set -euo pipefail
          # Ensure AppImage is executable
          cat > config/hooks/normal/00-post-install.chroot <<'EOF'
          #!/bin/bash
          set -euo pipefail
          chmod +x /opt/trezor/trezor-suite.AppImage || true
          EOF
          chmod +x config/hooks/normal/00-post-install.chroot

          # Sanitize any stale 'bookworm/updates' security lines if some tool inserts them
          cat > config/hooks/normal/05-fix-security-sources.chroot <<'EOF'
          #!/bin/bash
          set -euo pipefail
          for f in /etc/apt/sources.list /etc/apt/sources.list.d/*.list; do
            [ -e "$f" ] || continue
            sed -i -E 's#(deb\\s+.*debian-security)\\s+bookworm/updates(\\s.*)#\\1 bookworm-security\\2#g' "$f" || true
          done
          EOF
          chmod +x config/hooks/normal/05-fix-security-sources.chroot

      - name: Configure live-build (disable default security; we add the correct one)
        run: |
          set -euo pipefail
          sudo lb clean --purge || true
          sudo lb config noauto \
            --mode debian \
            --architectures "${ARCH}" \
            --distribution "${SUITE}" \
            --binary-images iso-hybrid \
            --memtest none \
            --debian-installer false \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main contrib non-free-firmware" \
            --mirror-bootstrap "http://deb.debian.org/debian/" \
            --mirror-chroot    "http://deb.debian.org/debian/" \
            --mirror-binary    "http://deb.debian.org/debian/" \
            --mirror-chroot-security "http://deb.debian.org/debian-security" \
            --mirror-binary-security "http://deb.debian.org/debian-security" \
            --security false \
            --bootappend-live "boot=live components quiet splash" \
            --iso-application "Debian Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "${ISO_LABEL}" \
            --checksums sha256

          # Add only the *security* entry via sources.list.d to avoid duplicates.
          mkdir -p config/archives
          cat > config/archives/01security.list.chroot <<'EOF'
          deb http://deb.debian.org/debian-security bookworm-security main contrib non-free-firmware
          EOF
          cp config/archives/01security.list.chroot config/archives/01security.list.binary

      - name: Build ISO (verbose)
        run: |
          set -euo pipefail
          time sudo lb build 2> logs/live-build-stderr.log | tee logs/live-build.log
          echo "::group::Produced files"; ls -lah || true; echo "::endgroup::"

      - name: Rename ISO + checksums
        if: success()
        run: |
          set -euo pipefail
          ISO=$(ls -1 *.hybrid.iso 2>/dev/null || true)
          [[ -z "$ISO" ]] && ISO=$(ls -1 live-image-*.hybrid.iso 2>/dev/null || true)
          [[ -z "$ISO" ]] && { echo "Could not find built ISO"; ls -lah; exit 2; }
          OUT="${ISO_BASENAME}-${SUITE}-${ARCH}.iso"
          mv "$ISO" "$OUT"
          sha256sum "$OUT" | tee "${OUT}.sha256"

      - name: Upload artifacts (ISO + logs + config)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debian-live-iso-and-logs
          path: |
            *.iso
            *.iso.sha256
            logs/**
            config/**
            build-cache/release.json
          retention-days: 14
