name: Build Debian Live ISO (Trezor Suite)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * MON"   # weekly

jobs:
  build:
    runs-on: ubuntu-latest
    # Build Bookworm on Bookworm for maximum compatibility
    container:
      image: debian:bookworm

    defaults:
      run:
        shell: bash

    env:
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC
      SUITE: bookworm
      # Disable LB's legacy security line (which may use bookworm/updates)
      LB_SECURITY: "false"
      EXPECTED_TREZOR_FPR: EB483B26B078A4AA1B6F425EE21B6950A2ECB65C

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps
        run: |
          set -euo pipefail
          apt-get update
          apt-get install -y --no-install-recommends \
            live-build debootstrap \
            grub-pc-bin grub-efi-amd64-bin \
            xorriso squashfs-tools mtools dosfstools \
            ca-certificates curl jq gpg coreutils

      - name: Prepare live-build config tree
        run: |
          set -euo pipefail
          rm -rf config build-cache logs || true
          mkdir -p \
            config/package-lists \
            config/includes.chroot/opt/trezor \
            config/includes.chroot/usr/share/applications \
            config/includes.chroot/etc/udev/rules.d \
            config/hooks/normal \
            config/archives \
            build-cache logs

          # (Optional) small desktop & basics so Suite can run
          cat > config/package-lists/desktop.list.chroot <<'PKGS'
          task-xfce-desktop
          xdg-utils
          fuse3
          libfuse2
          udev
          PKGS

          # Desktop launcher
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Type=Application
          Name=Trezor Suite
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Icon=trezor-suite
          Terminal=false
          Categories=Finance;Utility;
          EOF

      - name: Fetch Trezor Suite (latest) and verify GPG
        env:
          GH_API: https://api.github.com/repos/trezor/trezor-suite/releases/latest
        run: |
          set -euo pipefail
          cd build-cache

          # Query latest release assets
          curl -fsSL -H "Accept: application/vnd.github+json" "$GH_API" -o rel.json
          APP_URL=$(jq -r '.assets[] | select(.name|test("(?i)linux.*AppImage$")) | .browser_download_url' rel.json | head -n1)
          [[ -n "$APP_URL" ]] || { echo "No Linux AppImage found in latest release"; jq -r '.assets[].name' rel.json; exit 2; }
          SIG_URL="${APP_URL}.asc"

          # Download binary + detached signature
          curl -fsSL "$APP_URL" -o trezor-suite.AppImage
          curl -fsSL "$SIG_URL" -o trezor-suite.AppImage.asc

          # Import signing key via WKD, fall back to canonical URL
          if ! gpg --auto-key-locate wkd -q --locate-keys security@trezor.io; then
            curl -fsSL https://trezor.io/security/satoshilabs-2021-signing-key.asc -o satoshilabs-2021-signing-key.asc
            gpg --import satoshilabs-2021-signing-key.asc
          fi

          # Check the imported fingerprint matches the official one
          IMPORTED_FPR=$(gpg --with-colons --fingerprint | awk -F: '/^fpr:/{print $10; exit}')
          echo "Imported key fingerprint: $IMPORTED_FPR"
          [[ "$IMPORTED_FPR" == "$EXPECTED_TREZOR_FPR" ]] || { echo "Fingerprint mismatch"; exit 5; }

          # Verify signature and parse status
          set -o pipefail
          gpg --status-fd=1 --batch --verify trezor-suite.AppImage.asc trezor-suite.AppImage \
            | tee ../logs/gpg-status.log
          GOODSIG_COUNT=$(awk 'BEGIN{c=0} /^\[GNUPG:\] GOODSIG /{c++} END{print c}' ../logs/gpg-status.log)
          VALIDSIG=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' ../logs/gpg-status.log)
          echo "GOODSIG count: $GOODSIG_COUNT"
          echo "VALIDSIG fingerprint: $VALIDSIG"
          [[ "$GOODSIG_COUNT" -ge 1 && "$VALIDSIG" == "$EXPECTED_TREZOR_FPR" ]]

          chmod +x trezor-suite.AppImage
          cp trezor-suite.AppImage ../config/includes.chroot/opt/trezor/trezor-suite.AppImage

          # Official udev rules so the device is usable in the live system
          curl -fsSL https://data.trezor.io/udev/51-trezor.rules \
            -o ../config/includes.chroot/etc/udev/rules.d/51-trezor.rules

      - name: Configure live-build (Debian Bookworm)
        run: |
          set -euo pipefail
          lb clean --purge

          # GRUB-only bootloaders; skip memtest; add firmware area
          lb config noauto \
            --mode debian \
            --architectures amd64 \
            --distribution "${SUITE}" \
            --binary-images iso-hybrid \
            --bootloaders "grub-efi grub-pc" \
            --debian-installer none \
            --memtest none \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main contrib non-free-firmware" \
            --mirror-bootstrap "http://deb.debian.org/debian/" \
            --mirror-chroot "http://deb.debian.org/debian/" \
            --mirror-chroot-security "http://deb.debian.org/debian-security" \
            --mirror-binary "http://deb.debian.org/debian/" \
            --mirror-binary-security "http://deb.debian.org/debian-security" \
            --bootappend-live "boot=live components quiet splash toram" \
            --iso-application "Debian Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "DEBIAN_${SUITE^^}_TREZOR" \
            --checksums sha256

          # Provide correct apt sources including 'bookworm-security'
          # and rely on LB_SECURITY=false to avoid the legacy /updates line.
          cat > config/archives/00debian-main.list.chroot <<'EOF'
          deb http://deb.debian.org/debian bookworm main contrib non-free-firmware
          deb http://deb.debian.org/debian bookworm-updates main contrib non-free-firmware
          deb http://deb.debian.org/debian-security bookworm-security main contrib non-free-firmware
          EOF
          cp config/archives/00debian-main.list.chroot config/archives/00debian-main.list.binary

      - name: Build ISO
        run: |
          set -euo pipefail
          lb --version || true
          time lb build | tee logs/live-build.log

      - name: Summarize and checksum
        if: always()
        run: |
          set -euo pipefail
          ls -lh *.iso || true
          if compgen -G "*.iso" > /dev/null; then
            ISO=$(ls -1t *.iso | head -n1)
            sha256sum "$ISO" | tee logs/sha256sum.txt
          fi
          echo "=== gpg status (first 150 lines) ==="
          sed -n '1,150p' logs/gpg-status.log || true
          echo "=== live-build tail (last 200 lines) ==="
          tail -n 200 logs/live-build.log || true

      - name: Upload artifacts (ISO + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trezor-debian-live
          path: |
            *.iso
            logs/**
          if-no-files-found: warn
