name: Build Debian Live ISO with Trezor Suite

on:
  workflow_dispatch:
    inputs:
      trezor_tag:
        description: "Optional: pin a specific Trezor Suite tag (e.g. v25.9.3). Leave empty for latest."
        required: false
        default: ""
  schedule:
    - cron: "0 8 1 * *"   # monthly rebuild to pull Debian security updates + latest Suite

jobs:
  build-debian-live:
    runs-on: ubuntu-latest

    # Build *inside* Debian bookworm for maximum compatibility with live-build.
    container:
      image: debian:bookworm

    # IMPORTANT: default shell in containers is 'sh'; force bash to use 'set -o pipefail', etc.
    defaults:
      run:
        shell: bash

    env:
      SUITE: bookworm
      ARCH: amd64
      ISO_BASENAME: debian-live-trezor
      ISO_LABEL: DEBIAN_bookworm_TREZOR
      # SatoshiLabs 2021 Signing Key fingerprint (MUST match VALIDSIG)
      TREZOR_FPR: "EB483B26B078A4AA1B6F425EE21B6950A2ECB65C"
      # Official sources
      TREZOR_KEY_URL: "https://trezor.io/security/satoshilabs-2021-signing-key.asc"
      TREZOR_UDEV_URL: "https://data.trezor.io/udev/51-trezor.rules"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prep APT & tools
        run: |
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            live-build debootstrap \
            xorriso squashfs-tools dosfstools mtools \
            grub-pc-bin grub-efi-amd64-bin \
            ca-certificates curl wget jq gnupg udev \
            file libfuse2
          lb --version || true
          debootstrap --version || true

      - name: Prepare config tree
        run: |
          set -euo pipefail
          rm -rf config logs build-cache auto
          mkdir -p config/includes.chroot/opt/trezor
          mkdir -p config/includes.chroot/usr/share/applications
          mkdir -p config/includes.chroot/etc/udev/rules.d
          mkdir -p config/hooks/normal
          mkdir -p config/package-lists
          mkdir -p logs build-cache auto

      # ---------- Minimal desktop & helpers so Trezor Suite (GUI) runs out-of-the-box ----------
      - name: Package list (XFCE + essentials)
        run: |
          set -euo pipefail
          cat > config/package-lists/desktop.list.chroot <<'EOF'
          # Lightweight desktop + basics
          task-xfce-desktop
          network-manager
          xorg
          policykit-1
          # AppImage runtime & device helpers
          libfuse2
          usbutils
          udev
          curl
          ca-certificates
          gnupg
          EOF

      - name: udev rules & desktop launcher
        run: |
          set -euo pipefail
          curl -fsSL "${TREZOR_UDEV_URL}" -o config/includes.chroot/etc/udev/rules.d/51-trezor.rules
          cat > config/includes.chroot/usr/share/applications/trezor-suite.desktop <<'EOF'
          [Desktop Entry]
          Name=Trezor Suite
          Comment=Manage your Trezor hardware wallet
          Exec=/opt/trezor/trezor-suite.AppImage --no-sandbox
          Terminal=false
          Type=Application
          Categories=Finance;Utility;
          EOF

      # ---------- Fetch Trezor Suite from GitHub Releases & verify with pinned VALIDSIG ----------
      - name: Fetch Trezor Suite assets
        id: suite
        run: |
          set -euo pipefail
          TAG="${{ github.event.inputs.trezor_tag }}"
          if [[ -n "$TAG" ]]; then
            API="https://api.github.com/repos/trezor/trezor-suite/releases/tags/${TAG}"
          else
            API="https://api.github.com/repos/trezor/trezor-suite/releases/latest"
          fi
          curl -fsSL "$API" -o build-cache/release.json
          APP_URL=$(jq -r '.assets[] | select(.name|test("AppImage$")) | .browser_download_url' build-cache/release.json | head -n1)
          ASC_URL=$(jq -r '.assets[] | select(.name|test("AppImage.asc$")) | .browser_download_url' build-cache/release.json | head -n1)
          if [[ -z "$APP_URL" || -z "$ASC_URL" ]]; then
            echo "Could not locate AppImage or .asc in the release"; jq -r '.assets[]?.name' build-cache/release.json; exit 1
          fi
          curl -fsSL "$APP_URL" -o build-cache/trezor-suite.AppImage
          curl -fsSL "$ASC_URL" -o build-cache/trezor-suite.AppImage.asc
          file build-cache/trezor-suite.AppImage || true

      - name: Import SatoshiLabs 2021 key & verify signature (fingerprint pinned)
        run: |
          set -euo pipefail
          curl -fsSL "${TREZOR_KEY_URL}" -o build-cache/trezor.asc
          gpg --batch --import build-cache/trezor.asc

          gpg --status-fd=1 --batch --verify \
              build-cache/trezor-suite.AppImage.asc build-cache/trezor-suite.AppImage \
              1> logs/gpg-status.log 2> logs/gpg-stderr.log || true

          # Must have GOODSIG and VALIDSIG matching the pinned fingerprint
          GOODSIG_COUNT=$(awk 'BEGIN{c=0} /^\[GNUPG:\] GOODSIG /{c++} END{print c}' logs/gpg-status.log)
          SIG_FPR=$(awk '/^\[GNUPG:\] VALIDSIG /{print $3; exit}' logs/gpg-status.log)
          echo "GOODSIG count: ${GOODSIG_COUNT:-0}"
          echo "VALIDSIG fingerprint: ${SIG_FPR:-missing}"
          if [[ "${GOODSIG_COUNT:-0}" -lt 1 || -z "$SIG_FPR" || "$SIG_FPR" != "$TREZOR_FPR" ]]; then
            echo "Signature verification failed or fingerprint mismatch"; exit 5
          fi
          chmod +x build-cache/trezor-suite.AppImage
          cp build-cache/trezor-suite.AppImage config/includes.chroot/opt/trezor/trezor-suite.AppImage
          ls -l config/includes.chroot/opt/trezor/

      # ---------- Post-install hook: small niceties ----------
      - name: Hook (post-install in chroot)
        run: |
          set -euo pipefail
          cat > config/hooks/normal/00-post-install.chroot <<'EOF'
          #!/bin/bash
          set -euo pipefail
          chmod +x /opt/trezor/trezor-suite.AppImage || true
          # Make sure udev is active; XFCE autologin is *not* forced for safety.
          EOF
          chmod +x config/hooks/normal/00-post-install.chroot

      # ---------- Configure live-build for Debian bookworm ----------
      - name: Configure live-build (GRUB for BIOS+UEFI, memtest off)
        run: |
          set -euo pipefail
          lb clean --purge || true
          lb config noauto \
            --mode debian \
            --architectures "${ARCH}" \
            --distribution "${SUITE}" \
            --binary-images iso-hybrid \
            --bootloaders "grub-pc grub-efi" \
            --memtest none \
            --debian-installer false \
            --apt-secure true \
            --apt-recommends true \
            --archive-areas "main contrib non-free-firmware" \
            --mirror-bootstrap "http://deb.debian.org/debian/" \
            --mirror-chroot    "http://deb.debian.org/debian/" \
            --mirror-chroot-security "http://security.debian.org/debian-security" \
            --mirror-binary    "http://deb.debian.org/debian/" \
            --mirror-binary-security "http://security.debian.org/debian-security" \
            --bootappend-live "boot=live components quiet splash" \
            --iso-application "Debian Live (Trezor Suite)" \
            --iso-preparer "GitHub Actions" \
            --iso-publisher "YourOrg" \
            --iso-volume "${ISO_LABEL}" \
            --checksums sha256

      - name: Build ISO (verbose)
        run: |
          set -euo pipefail
          time lb build 2> logs/live-build-stderr.log | tee logs/live-build.log
          echo "::group::Produced files"; ls -lah || true; echo "::endgroup::"

      - name: Rename ISO + checksums
        if: success()
        run: |
          set -euo pipefail
          ISO=$(ls -1 *.hybrid.iso 2>/dev/null || true)
          [[ -z "$ISO" ]] && ISO=$(ls -1 live-image-*.hybrid.iso 2>/dev/null || true)
          [[ -z "$ISO" ]] && { echo "Could not find built ISO"; ls -lah; exit 2; }
          OUT="${ISO_BASENAME}-${SUITE}-${ARCH}.iso"
          mv "$ISO" "$OUT"
          sha256sum "$OUT" | tee "${OUT}.sha256"

      - name: Upload artifacts (ISO + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debian-live-iso-and-logs
          path: |
            *.iso
            *.iso.sha256
            logs/**
            config/**
            build-cache/release.json
          retention-days: 14
